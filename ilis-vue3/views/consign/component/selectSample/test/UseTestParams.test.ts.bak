import { describe, expect, it } from 'vitest'
import { ViewTestParamsItem } from '~/views/consign/component/selectSampleParam/modules/BaseTestParams.ts'
import { TestParamsMetaDataItem, UseTestParams } from '~/views/consign/component/selectSample/modules/UseTestParams.ts'
import {UseBasicInfo} from "~/views/consign/component/selectSample/modules/UseBasicInfo.ts";

describe('useTestParams methods', () => {
  const useBasicInfo = new UseBasicInfo();
  const useTestParams = new UseTestParams(useBasicInfo)
  useTestParams.sampleAmount = 2

  const viewTestParamItem = new ViewTestParamsItem()
  viewTestParamItem.id = generateGUID()
  viewTestParamItem.checkPoint = 4
  viewTestParamItem.price = 100

  it('should correctly calculates paramAmount', () => {
    useTestParams.calcTestParamPrice(viewTestParamItem)

    expect(viewTestParamItem.count).toBe(2)
    expect(viewTestParamItem.paramAmount).toBe(2 * 4 * 100)
  })

  it('should not exist id field in metadata', () => {
    const viewTestParams = [viewTestParamItem]
    const metaDataTestParams = useTestParams.formatTestParams2MetaData(viewTestParams)

    const metaDataItem = metaDataTestParams[0]

    expect(metaDataItem.testParamId).toBe(viewTestParamItem.id)
    expect('id' in metaDataItem).toBeFalsy()
  })

  it('should has id field in viewTestParam', () => {
    const metaDataItem = new TestParamsMetaDataItem()
    metaDataItem.testParamId = generateGUID()
    const metaDataTestParams = [metaDataItem]
    const viewTestParams = useTestParams.formatTestParams2View(metaDataTestParams)

    const viewTestParamItem = viewTestParams[0]

    expect(viewTestParamItem.id).toBe(metaDataItem.testParamId)
  })
})
